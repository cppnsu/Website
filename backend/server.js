require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
const { GoogleSpreadsheet } = require("google-spreadsheet");

const app = express();

app.use(cors());
app.use(express.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// returns a doc object that we can use to create the final non-circular payload
async function create_doc_object(gSheetID) {
  // Initialize the sheet - doc ID is the long id in the sheets URL
  const doc = new GoogleSpreadsheet(gSheetID);

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: process.env.GOOGLE_PRIVATE_KEY,
  });

  return doc
}

async function create_data_payload(doc) {
  await doc.loadInfo(); // loads document properties and worksheets
  let sheet_length = doc.sheetsByIndex.length; // gets amount of worksheets in sheet
  let sheet_object = [];

  for(let i = 0; i < sheet_length; i++) {
    let sheet = doc.sheetsByIndex[i]; // loads in current worksheet to get info from
    let sheet_title = sheet.title; // the name of worksheet
    let rows = await sheet.getRows(); // the data for said worksheet
    let keys = sheet.headerValues; // the keys or entire A row for current worksheet
    
    // Making the inner object of the final sheet object array 
    let inner_obj = {}

    // initializing every key with an empty array 
    // so that we can easily push every row item to it
    keys.forEach(key => {
      inner_obj[String(key)] = [];
    })

    // pushing all row data to each key
    rows.forEach(row => {
      keys.forEach(key => {
        inner_obj[key].push(row[key])
      })
    })

    // adding sheet title to help querying data be easier
    let outside_obj = {[sheet_title]: inner_obj};
    sheet_object.push(outside_obj); // adding to final object
  }

  return sheet_object
}

app.get("/:page", async (req, res, next) => {
  try {
    let page_id = String(req.params.page) + "_PAGE_ID" // grabs and formats page id from url
    var doc_obj = await create_doc_object(process.env[page_id]); // creates the doc object
    var payload = await create_data_payload(doc_obj) // creates the payload to be sent off
    res.status(200).send(payload);
  } catch (err) {
    console.error(err.message);
    next(err);
  }
});

app.listen(3000, () => console.log("Server is up"));